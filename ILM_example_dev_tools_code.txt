#===============================================================
# - ILM setup for a custom index.  This is the old way, a more
# efficient way to leverage ILM management is to utilize Data
# streams.
# ----
# Before we get started, 
# let's clean up in case we have run this before.
DELETE my-test-idx
DELETE my-test-idx-0000*
DELETE _ilm/policy/my-demo-policy
# ---- Step 1
# Now, first step is to configure an ILM policy.  Notice a couple
# thigs here.  1) all the phases are super short for DEMO purpose
# 2) Delete phase is only 1 hour also, for demo purpose
PUT _ilm/policy/my-demo-policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover": {
            "max_age": "1m"
          },
          "set_priority": {
            "priority": 100
          }
        },
        "min_age": "0ms"
      },
      "warm": {
        "min_age": "0m",
        "actions": {
          "set_priority": {
            "priority": 50
          },
          "allocate": {
            "number_of_replicas": 1
          }
        }
      },
      "cold": {
        "min_age": "2m",
        "actions": {
          "set_priority": {
            "priority": 0
          },
          "allocate": {
            "number_of_replicas": 0
          }
        }
      },
      "delete": {
        "min_age": "60m",
        "actions": {
          "delete": {}
        }
      }
    }
  }
}
# ---- Step 2 [Only for test or Demo env]
# next to make sure this all happens quickly we are shrinking 
# the ILM poll cycle, FOR TESTING/DEMO ONLY, 
# production default is fine.
# The default is 10Min
PUT _cluster/settings
{
  "persistent": {
    "indices.lifecycle.poll_interval": "15s"
  }
}
# ---- Step 3
# we need to create an index template.  This sets 2 important
# settings for ILM demo.
# the Lifecycle Policy, which should match above
# and the rollover_alias, which will need to match our first
# write index, in later step.
PUT _template/my_example_template
{
  "index_patterns": ["my-test-idx-*"],                 
  "settings": {
    "number_of_shards": 1,
    "number_of_replicas": 1,
    "index.lifecycle.name": "my-demo-policy",      
    "index.lifecycle.rollover_alias": "my-test-idx"
  }
}

# ----------------------------------------------------------------
# Make sure you create the index and alias before posting any docs
# during this process on your own.
# ----------------------------------------------------------------
#
# ---- Step 4  - now to do the initial bootstrap, you need to 
# create the index, with the write alias 
#
# Notice this index doesn't exist yet, we are creating it with this
# step, AND setting the initial write Alias, which must match the 
# "rollover_alias" in our Index Template, the name needs to match 
# out index_template pattern we used above, and this new index will
# inherit all the settings applied in Step 3
PUT my-test-idx-000001
{
  "aliases": {
    "my-test-idx": {
      "is_write_index": true
    }
  }
}
# you can see this index 
GET my-test-idx-000001
# the _ilm/explain should show the index is managed
GET my-test-idx-000001/_ilm/explain
POST my-test-idx/_doc/1
{
  "@timestamp": "2023-12-19T11:07:11.000Z",
  "host.name": "host1",
  "message": "example message 1",
  "event.category": "example-log"
}

GET my-test-idx-000001/_ilm/explain
GET my-test-idx-000001
# ------
# go ahead and post another doc, ilm won't kick over til you have 2
# docs
POST my-test-idx/_doc/2
{
  "@timestamp": "2023-12-19T11:07:12.000Z",
  "host.name": "host1",
  "message": "example message 2",
  "event.category": "example-log"
}
GET my-test-idx-000001/_search
GET my-test-idx
GET my-test-idx/_search
POST my-test-idx/_doc/2
{
  "@timestamp": "2023-12-19T11:07:12.000Z",
  "host.name": "host1",
  "message": "example message 2",
  "event.category": "example-log"
}
# wait about a minute then post another
POST my-test-idx/_doc/3
{
  "@timestamp": "2023-12-19T11:07:13.000Z",
  "host.name": "host1",
  "message": "example message 3",
  "event.category": "example-log"
}
# one more minute post the last
POST my-test-idx/_doc/4
{
  "@timestamp": "2023-12-19T11:07:14.000Z",
  "host.name": "host1",
  "message": "example message 4",
  "event.category": "example-log"
}
POST my-test-idx/_doc/5
{
  "@timestamp": "2023-12-19T11:07:15.000Z",
  "host.name": "host1",
  "message": "example message 5",
  "event.category": "example-log"
}
GET my-test-idx-000001/_ilm/explain
GET my-test-idx-000002/_ilm/explain
GET my-test-idx-000003/_ilm/explain
GET my-test-idx-00000*/_ilm/explain
# if you only have 1 doc in last index, which is hot, it'll just
# sit there, until the next comes in
GET my-test-idx/_search



#==== These are problems you can test after step 3 ==========
# ---- Example problem if you do not have the write
# alias setup, in Step 4, it will cause an error in ILM phase
# if you wait 60 seconds, and do the ILM explain.
# If you are not interested in seeing the error you can skip this 
# if you don't care to see the issue
POST my-test-idx-000001/_doc/1
{
  "@timestamp": "2023-12-07T11:07:11.000Z",
  "host.name": "host1",
  "message": "example message 1",
  "event.category": "example-log"
}
GET my-test-idx-000001/_ilm/explain
# ---- Example cleanup step
# if you did the test, go ahead and delete this INDEX 
# for the true next step
DELETE my-test-idx-0000*
# EXAMPLE PROBLEM one more problem you will run into, 
# is you want to write to the alias before you have not added it 
# to an index, it will literally
# create an index, you can try that here too.
POST my-test-idx/_doc/1
{
  "@timestamp": "2023-12-07T11:07:11.000Z",
  "host.name": "host1",
  "message": "example message 1",
  "event.category": "example-log"
}
# if things were working properly, you should have an initial
# index with the -000001 at the end, and we do not.
GET my-test-idx-000001/_ilm/explain
# it actually lives in my-test-
GET my-test-idx/_ilm/explain
# --- second example problem cleanup
DELETE my-test-idx
#================================================================
